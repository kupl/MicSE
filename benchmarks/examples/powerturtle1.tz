parameter (or (nat %donateFood) (unit %feedTurtle));
storage   (pair (nat %foodTotal) (nat %turtleSize));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%donateFood
        # == donateFood ==
        # self.data.foodTotal += params # @storage : @parameter%donateFood
        DUP;        # @storage : @storage : @parameter%donateFood
        CDR;        # nat : @storage : @parameter%donateFood
        SWAP;       # @storage : nat : @parameter%donateFood
        CAR;        # nat : nat : @parameter%donateFood
        DIG 2;      # @parameter%donateFood : nat : nat
        ADD;        # nat : nat
        PAIR;       # pair nat nat
      }
      {
        DROP;       # @storage
        # == feedTurtle ==
        # self.data.turtleSize = self.data.turtleSize << self.data.foodTotal # @storage
        DUP;        # @storage : @storage
        DUP;        # @storage : @storage : @storage
        CAR;        # nat : @storage : @storage
        SWAP;       # @storage : nat : @storage
        CDR;        # nat : nat : @storage
        DIG 2;      # @storage : nat : nat
        CAR;        # nat : nat : nat
        SWAP;       # nat : nat : nat
        LSL;        # nat : nat
        SWAP;       # nat : nat
        PAIR;       # pair nat nat
      }; # pair nat nat
    NIL operation; # list operation : pair nat nat
    PAIR;       # pair (list operation) (pair nat nat)
  };