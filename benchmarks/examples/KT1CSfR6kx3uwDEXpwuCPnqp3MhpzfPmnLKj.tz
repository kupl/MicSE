parameter (or
            (or
              (or (nat %cancel_swap) (pair %collect (nat %objkt_amount) (nat %swap_id)))
              (or (pair %curate (nat %hDAO_amount) (nat %objkt_id)) (unit %default)))
            (or
              (pair %mint_OBJKT (pair (address %address) (nat %amount))
                                (bytes %metadata)
                                (nat %royalties))
              (pair %swap (nat %objkt_amount) (nat %objkt_id) (mutez %xtz_per_objkt))));
storage (pair (pair (address %administrator) (address %hicetnuncMinterAddress))
              (map %shares address nat)
              (nat %totalShares));
code { LAMBDA
         (pair (pair address address) (pair (map address nat) nat))
         unit
         { CAR ;
           CAR ;
           SENDER ;
           COMPARE ;
           EQ ;
           IF
             { UNIT }
             { PUSH string "Entrypoint can call only administrator" ; FAILWITH } } ;        # lambda : %ps
       SWAP ;                                                                               # %ps : lambda
       UNPAIR ;                                                                             # %p : %s : lambda
       IF_LEFT
         { IF_LEFT
             { IF_LEFT
                 { SWAP ;
                   DUP ;
                   DIG 3 ;
                   SWAP ;
                   EXEC ;
                   DROP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CDR ;
                   CONTRACT %cancel_swap nat ;
                   IF_NONE { PUSH string "No minter found" ; FAILWITH } {} ;
                   PUSH mutez 0 ;
                   DIG 2 ;
                   TRANSFER_TOKENS ;
                   SWAP ;
                   NIL operation ;
                   DIG 2 ;
                   CONS ;
                   PAIR }
                 { SWAP ;
                   DUP ;
                   DIG 3 ;
                   SWAP ;
                   EXEC ;
                   DROP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CDR ;
                   CONTRACT %collect (pair (nat %objkt_amount) (nat %swap_id)) ;
                   IF_NONE { PUSH string "No minter found" ; FAILWITH } {} ;
                   PUSH mutez 0 ;
                   DIG 2 ;
                   TRANSFER_TOKENS ;
                   SWAP ;
                   NIL operation ;
                   DIG 2 ;
                   CONS ;
                   PAIR } }
             { IF_LEFT
                 { SWAP ;
                   DUP ;
                   DIG 3 ;
                   SWAP ;
                   EXEC ;
                   DROP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CDR ;
                   CONTRACT %collect (pair (nat %hDAO_amount) (nat %objkt_id)) ;
                   IF_NONE { PUSH string "No minter found" ; FAILWITH } {} ;
                   PUSH mutez 0 ;
                   DIG 2 ;
                   TRANSFER_TOKENS ;
                   SWAP ;
                   NIL operation ;
                   DIG 2 ;
                   CONS ;
                   PAIR }
                 { DROP ;                                                                   # %s : lambda
                   SWAP ;                                                                   # lambda : %s
                   DROP ;                                                                   # %s
                   NIL operation ;                                                          # [] : %s
                   SWAP ;                                                                   # %s : []
                   DUP ;                                                                    # %s : %s : []
                   DUG 2 ;                                                                  # %s : [] : %s
                   CDR ;                                                                    # cdr(%s) : [] : %s
                   CAR ;                                                                    # %s-shares : [] : %s
                   ITER { SWAP ;                                                            # [] : (%s-shares.key, %s-shares.value) : %s
                          PAIR ;                                                            # ([], (%s-shares.key, %s-shares.value)) : %s
                          SWAP ;                                                            # %s : ([], (%s-shares.key, %s-shares.value))
                          DUP ;                                                             # %s : %s : ([], (%s-shares.key, %s-shares.value))
                          DUG 2 ;                                                           # %s : ([], (%s-shares.key, %s-shares.value)) : %s
                          CDR ;                                                             # cdr(%s) : ([], (%s-shares.key, %s-shares.value)) : %s
                          CDR ;                                                             # %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          SWAP ;                                                            # ([], (%s-shares.key, %s-shares.value)) : %s-totalShares : %s
                          DUP ;                                                             # ([], (%s-shares.key, %s-shares.value)) : ([], (%s-shares.key, %s-shares.value)) : %s-totalShares : %s
                          DUG 2 ;                                                           # ([], (%s-shares.key, %s-shares.value)) : %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          CDR ;                                                             # (%s-shares.key, %s-shares.value) : %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          CDR ;                                                             # %s-shares.value : %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          AMOUNT ;                                                          # %amount : %s-shares.value : %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          MUL ;                                                             # %amount * %s-shares.value : %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          EDIV ;                                                            # ((%amount * %s-shares.value) / %s-totalShares, (%amount * %s-shares.value) mod %s-totalShares)_opt : ([], (%s-shares.key, %s-shares.value)) : %s
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;                # ((%amount * %s-shares.value) / %s-totalShares, (%amount * %s-shares.value) mod %s-totalShares) : ([], (%s-shares.key, %s-shares.value)) : %s
                          CAR ;                                                             # (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          SWAP ;                                                            # ([], (%s-shares.key, %s-shares.value)) : (%amount * %s-shares.value) / %s-totalShares : %s
                          DUP ;                                                             # ([], (%s-shares.key, %s-shares.value)) : ([], (%s-shares.key, %s-shares.value)) : (%amount * %s-shares.value) / %s-totalShares : %s
                          DUG 2 ;                                                           # ([], (%s-shares.key, %s-shares.value)) : (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          CDR ;                                                             # (%s-shares.key, %s-shares.value) : (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          CAR ;                                                             # %s-shares.key : (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          CONTRACT unit ;                                                   # contract(%s-shares.key)_opt : (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;          # contract(%s-shares.key) : (%amount * %s-shares.value) / %s-totalShares : ([], (%s-shares.key, %s-shares.value)) : %s
                          SWAP ;                                                            # (%amount * %s-shares.value) / %s-totalShares : contract(%s-shares.key) : ([], (%s-shares.key, %s-shares.value)) : %s
                          UNIT ;                                                            # () : (%amount * %s-shares.value) / %s-totalShares : contract(%s-shares.key) : ([], (%s-shares.key, %s-shares.value)) : %s
                          TRANSFER_TOKENS ;                                                 # tt ((), ((%amount * %s-shares.value) / %s-totalShares), contract(%s-shares.key)) : ([], (%s-shares.key, %s-shares.value)) : %s
                          SWAP ;                                                            # ([], (%s-shares.key, %s-shares.value)) : tt ((), ((%amount * %s-shares.value) / %s-totalShares), contract(%s-shares.key)) : %s
                          CAR ;                                                             # [] : tt ((), ((%amount * %s-shares.value) / %s-totalShares), contract(%s-shares.key)) : %s
                          SWAP ;                                                            # tt ((), ((%amount * %s-shares.value) / %s-totalShares), contract(%s-shares.key)) : [] : %s
                          CONS } ;                                                          # [tt ((), ((%amount * %s-shares.value) / %s-totalShares), contract(%s-shares.key))] : %s
                   PAIR } } }
         { IF_LEFT
             { SWAP ;
               DUP ;
               DIG 3 ;
               SWAP ;
               EXEC ;
               DROP ;
               DUP ;
               DUG 2 ;
               CAR ;
               CDR ;
               CONTRACT %mint_OBJKT (pair (pair (address %address) (nat %amount))
                                          (pair (bytes %metadata) (nat %royalties))) ;
               IF_NONE { PUSH string "No minter found" ; FAILWITH } {} ;
               PUSH mutez 0 ;
               DIG 2 ;
               TRANSFER_TOKENS ;
               SWAP ;
               NIL operation ;
               DIG 2 ;
               CONS ;
               PAIR }
             { SWAP ;
               DUP ;
               DIG 3 ;
               SWAP ;
               EXEC ;
               DROP ;
               DUP ;
               DUG 2 ;
               CAR ;
               CDR ;
               CONTRACT %swap (pair (nat %objkt_amount)
                                    (pair (nat %objkt_id) (mutez %xtz_per_objkt))) ;
               IF_NONE { PUSH string "No minter found" ; FAILWITH } {} ;
               PUSH mutez 0 ;
               DIG 2 ;
               TRANSFER_TOKENS ;
               SWAP ;
               NIL operation ;
               DIG 2 ;
               CONS ;
               PAIR } } }