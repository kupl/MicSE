parameter (pair (address %toAddr) (mutez %money));
storage   (pair (map %balance address mutez) (pair (address %owner) (mutez %totalSupply)));
code
  {
    # (toAddr, money), (balance, (owner, totalSupply)) = param, storage in
    UNPAIR;         # @param : @storage
    UNPAIR;         # %toAddr : %money : @storage
    DIP 2 { UNPAIR; }; # %toAddr : %money : %balance : pair %owner %totalSupply
    # existing_s = match balance[SENDER] with Some m -> m | None -> FAILURE in
    DUP 3;          # %balance : %toAddr : %money : %balance : pair %owner %totalSupply
    SENDER;         # @sender : %balance : %toAddr : %money : %balance : pair %owner %totalSupply
    GET;            # %balance[@sender] : %toAddr : %money : %balance : pair %owner %totalSupply
    IF_NONE
      { FAIL; }
      {};           # %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    # balance_i = if existing_s >= money then update (existing_s - money, SENDER, balance) else FAILURE in
    DUP 3;          # %money : %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    DUP 2;          # %existing_s : %money : %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    COMPARE;        # int : %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    GE;             # bool : %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    IF
      {}
      { FAIL; };    # %existing_s : %toAddr : %money : %balance : pair %owner %totalSupply
    DIP 
      { 
        DIG 2;      # %existing_s : %balance : %toAddr : %money : pair %owner %totalSupply
        DUP 3;      # %existing_s : %money : %balance : %toAddr : %money : pair %owner %totalSupply
      };
    SUB;            # mutez : %balance : %toAddr : %money : pair %owner %totalSupply
    SOME;           # option mutez : %balance : %toAddr : %money : pair %owner %totalSupply
    SENDER;         # @sender : option mutez : %balance : %toAddr : %money : pair %owner %totalSupply
    UPDATE;         # %balance_i : %toAddr : %money : pair %owner %totalSupply
    # existing_ta = match balance_i[toAddr] with Some m -> m | None -> 0 in
    DUP;            # %balance_i : %balance_i : %toAddr : %money : pair %owner %totalSupply
    DUP 3;          # %toAddr : %balance_i : %balance_i : %toAddr : %money : pair %owner %totalSupply
    GET;            # %balance_i[%toAddr] : %balance_i : %toAddr : %money : pair %owner %totalSupply
    IF_NONE 
      { PUSH mutez 0; } 
      {};           # %existing_ta : %balance_i : %toAddr : %money : pair %owner %totalSupply
    # new_balance = update (existing_ta + money, toAddr, balance_i) in
    DIP { DIG 2; }; # %existing_ta : %money : %balance_i : %toAddr : pair %owner %totalSupply
    ADD;            # mutez : %balance_i : %toAddr : pair %owner %totalSupply
    SOME;           # option mutez : %balance_i : %toAddr : pair %owner %totalSupply
    DIG 2;          # %toAddr : option mutez : %balance_i : pair %owner %totalSupply
    UPDATE;         # %new_balance : pair %owner %totalSupply
    PAIR;           # pair %new_balance (pair %owner %totalSupply)
    NIL operation;  # list operation : pair %new_balance (pair %owner %totalSupply)
    PAIR;           # pair (list operation) (pair (map address mutez) (pair (address %owner) (mutez %totalSupply)))
  };